# first we declare our upstream server, which is our Django application
upstream backend_server {
    # docker will automatically resolve this to the correct address
    # because we use the same name as the service: "backend"
    server backend:8000;
}

# here we declare our upstream server, which is our React application
upstream frontend_server {
    # docker will automatically resolve this to the correct address
    # because we use the same name as the service: "frontend"
    server frontend:3000;
}

# now we declare our main server
server {

    listen 80;
    server_name localhost;

    location / {
      proxy_set_header Host $http_host;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection $connection_upgrade;
      proxy_redirect off;
      proxy_buffering off;
      proxy_pass http://backend_server;
    }

}

map $http_upgrade $connection_upgrade {
  default upgrade;
  '' close;
}

upstream uvicorn {
  server unix:/tmp/uvicorn.sock;
}

server {
    listen 8080;
    server_name localhost;

    location /api {
        try_files $uri @proxy_api;
    }

    location @proxy_api {
        proxy_set_header X-Forwarded-Proto https;
        proxy_set_header X-Url-Scheme $scheme;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $http_host;
        proxy_redirect off;
        proxy_pass   http://backend_server;
    }

    # ignore cache frontend
    location ~* (service-worker\.js)$ {
        add_header 'Cache-Control' 'no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0';
        expires off;
        proxy_no_cache 1;
    }

    location / {
        proxy_pass http://frontend_server;
    }

    location /sockjs-node {
      proxy_pass http://frontend_server;
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection "Upgrade";
    }

}